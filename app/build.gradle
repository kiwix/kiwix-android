import groovy.json.JsonSlurper

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.0'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'me.tatarka:gradle-retrolambda:3.2.5'
  }
}

//apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  compile 'com.android.support:appcompat-v7:24.1.0'
  compile 'com.android.support:support-v13:24.1.0'
  compile 'com.android.support:support-v4:24.1.0'
  compile 'com.android.support:design:24.1.0'
  compile 'com.android.support:cardview-v7:24.1.0'


  androidTestCompile 'com.android.support:support-annotations:25.3.0'
  androidTestCompile 'com.android.support.test:runner:0.5'
  androidTestCompile 'com.android.support.test:rules:0.5'

  compile 'com.afollestad.material-dialogs:core:0.9.4.2'

  compile 'com.google.dagger:dagger:2.0.2'
  apt "com.google.dagger:dagger-compiler:2.0.2"

  compile 'com.yahoo.squidb:squidb:2.0.0'
  compile 'com.yahoo.squidb:squidb-annotations:2.0.0'
  apt 'com.yahoo.squidb:squidb-processor:2.0.0'

  compile 'com.squareup.okhttp3:okhttp:3.4.1'
  compile 'com.squareup.retrofit2:retrofit:2.1.0'
  compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
  compile('com.squareup.retrofit2:converter-simplexml:2.1.0') {
    exclude group: 'xpp3', module: 'xpp3'
    exclude group: 'stax', module: 'stax-api'
    exclude group: 'stax', module: 'stax'
  }

  compile 'io.reactivex:rxandroid:1.1.0'
  compile 'io.reactivex:rxjava:1.1.3'


  // fast adapter
  compile('com.mikepenz:fastadapter:2.1.7@aar') {
    transitive = true
  }
  compile 'eu.mhutti1.utils.storage:android-storage-devices:0.5.0'
  compile 'com.jakewharton:butterknife:8.0.1'
  apt 'com.jakewharton:butterknife-compiler:8.0.1'
  compile group: 'com.google.guava', name: 'guava', version: '19.0'

  testCompile 'junit:junit:4.12'
  androidTestCompile 'junit:junit:4.12'
  compile 'com.android.support.test:runner:0.5'
  compile 'junit:junit:4.12'

}

android {
  compileSdkVersion 24
  buildToolsVersion '25.0.0'

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 24
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }


  productFlavors {
    // Vanilla Kiwix app
    kiwix {
      println "Building Kiwix"
      // Set vanilla config
      buildConfigField "boolean", "IS_CUSTOM_APP", "false"
      buildConfigField "boolean", "HAS_EMBEDDED_ZIM", "false"
      buildConfigField "String", "ZIM_FILE_NAME", "\"\""
      buildConfigField "long", "ZIM_FILE_SIZE", "0"
      buildConfigField "int", "CONTENT_VERSION_CODE", "0"
      buildConfigField "String", "ENFORCED_LANG", "\"\""
      resValue "string", "app_name", "Kiwix"
      resValue "string", "app_search_string", "Search Kiwix"
    }
    // Custom apps built from a json file, zim file and icon set
    singlezim {
      println "Building Custom"
      def jsonFile = ""
      if (project.hasProperty('jsonFile')) {
        // Read json file from properties e.g command line
        jsonFile = file(project.property('jsonFile'))
      } else {
        // If no file provided use the test file
        jsonFile = file('src/custom/test.json')
      }
      def parsedJson = new JsonSlurper().parseText(jsonFile.text)
      def File zimfile = new File(parsedJson.zim_file)
      if (parsedJson.embed_zim) {
        // Place content in each lib directory for embeded zims
        file("src/main/jniLibs").eachDir() { folder ->
          copy {
            from parsedJson.zim_file
            into file("src/custom/jniLibs/" + folder.name)
            rename { String name -> "libcontent.so" }
          }
        }
        parsedJson.zim_file = "libcontent.so"
      }
      // Set custom config from json
      applicationId "$parsedJson.package"
      buildConfigField "boolean", "IS_CUSTOM_APP", "true"
      buildConfigField "boolean", "HAS_EMBEDDED_ZIM", "$parsedJson.embed_zim"
      def name = ""
      if (parsedJson.zim_file.lastIndexOf('/') >= 0) {
        name = parsedJson.zim_file.substring(parsedJson.zim_file.lastIndexOf('/') + 1)
      } else {
        name = parsedJson.zim_file
      }
      buildConfigField "String", "ZIM_FILE_NAME", "\"$name\""
      long length = zimfile.length()
      buildConfigField "long", "ZIM_FILE_SIZE", "$length"
      if (parsedJson.content_version_code != null) {
        buildConfigField "int", "CONTENT_VERSION_CODE", "$parsedJson.content_version_code"
      } else {
        buildConfigField "int", "CONTENT_VERSION_CODE", "$parsedJson.version_code"
      }
      buildConfigField "String", "ENFORCED_LANG", "\"$parsedJson.enforced_lang\""
      resValue "string", "app_name", "$parsedJson.app_name"
      resValue "string", "app_search_string", 'Search ' + "$parsedJson.app_name"
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    encoding = "UTF-8"

    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }

  /* Add back once proguard is configured
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }*/

  // Set project structure
  sourceSets {
    main {
      manifest.srcFile 'src/main/AndroidManifest.xml'
      java.srcDirs = ['src/main/java']
      resources.srcDirs = ['src/main/resources']
      aidl.srcDirs = ['src']
      renderscript.srcDirs = ['src']
      res.srcDirs = ['src/main/res']
      assets.srcDirs = ['src/main/assets']
    }

    test {
      java.srcDirs = ['src/test/java']
      resources.srcDirs = ['src/test/resources']
    }

    androidTest {
      java.srcDirs = ['src/androidTest/java']
      resources.srcDirs = ['src/androidTest/resources']
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.4'
}
